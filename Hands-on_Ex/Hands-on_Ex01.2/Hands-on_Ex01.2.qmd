---
title: "Hands-on Exercise 1.2" 
author: "liujianying"
---

In this exercise, we will use the \`tmap\` package along with four other key R packages: - \`readr\` for importing delimited text files, - \`tidyr\` for tidying data, - \`dplyr\` for data wrangling, - \`sf\` for handling geospatial data.

# Importing Data into R

## The Data

Two datasets will be used to create the choropleth map:

1.  **Master Plan 2014 Subzone Boundary (Web)**: This is a geospatial dataset in ESRI shapefile format, containing the geographical boundaries of Singapore at the planning subzone level.

2.  **Singapore Residents by Planning Area / Subzone, Age Group, Sex, and Type of Dwelling, June 2011-2020**: This is an aspatial dataset in CSV format, which can be linked to the shapefile using the PA and SZ fields as unique identifiers.

## Importing Geospatial Data into R

### Install and load necessary packages

```{r}
pacman::p_load(sf, tidyverse, dplyr, tmap)
```

The p_load function from the pacman package is used to install and load the sf and tidyverse packages into the R environment.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL") 

```

You can examine the content of the imported geospatial data:

```{r}
mpsz
```

## Importing Attribute Data into R

Next, we import the CSV file into R and save it as a data frame:

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")

```

# Data Preparation

Before creating a thematic map, prepare a data table with 2020 values. This table should include the variables `PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, and `DEPENDENCY`.

### Data Wrangling

Use the following data wrangling and transformation functions to prepare the data:

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG, values_from = POP) %>%
  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %>%
  mutate(`AGED` = rowSums(.[16:21])) %>%
  mutate(`TOTAL` = rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)
```

### Joining the Attribute Data and Geospatial Data

Before performing a georelational join, convert the `PA` and `SZ` fields to uppercase:

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(vars(PA, SZ), toupper) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Join the attribute data with the geospatial data:

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
```

Save the resulting data frame for later use:

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# Choropleth Mapping Geospatial Data Using tmap

## Quick Choropleth Mapping with `qtm()`

The `qtm()` function allows you to quickly draw a choropleth map:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

## Custom Choropleth Mapping with tmap Elements

To create a more customized map, use tmap's drawing elements:

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA and Population data from DOS", 
             position = c("left", "bottom"))
```

# Data Classification Methods in tmap

## Built-in Classification Methods

tmap provides ten classification methods. Here's how to apply the `quantile` and `equal` methods:

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", n = 5, style = "quantile") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", n = 5, style = "equal") +
  tm_borders(alpha = 0.5)

```

## Custom Breaks

You can define custom breakpoints for the classification:

```{r}
summary(mpsz_pop2020$DEPENDENCY)

tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

# Color Schemes

## Using ColorBrewer Palettes

To change the color scheme, use the `palette` argument:

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", n = 6, style = "quantile", palette = "Blues") +
  tm_borders(alpha = 0.5)
```

To reverse the color scheme:

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", style = "quantile", palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

# Map Layouts

## Map Legend

Customize the map legend:

```{r}


tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", style = "jenks", palette = "Blues", 
          legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone (Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## Map Style and Cartographic Furniture

Change the map style and add elements like a compass and scale bar:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))



```

Reset the default style:

```{r}
tmap_style("white")
```

# Drawing Small Multiple Choropleth Maps

Small multiple maps allow you to visualize changes across different variables or time periods.

## Using Multiple Aesthetic Arguments

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill(c("YOUNG", "AGED"), style = "equal", palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5)
```

## Using `tm_facets()` for Grouped Maps

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", style = "quantile", palette = "Blues", thres.poly = 0) + 
  tm_facets(by = "REGION_N", free.coords = TRUE, drop.shapes = TRUE) +
  tm_layout(legend.show = FALSE, title.position = c("center", "center"), title.size = 20) +
  tm_borders(alpha = 0.5)
```

## Using `tmap_arrange()` for Stand-alone Maps

```{r}
youngmap <- tm_shape(mpsz_pop2020) + 
  tm_polygons("YOUNG", style = "quantile", palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020) + 
  tm_polygons("AGED", style = "quantile", palette = "Blues")

tmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)
```

# Mapping Spatial Objects Meeting a Selection Criterion

You can map only the spatial objects meeting a specific selection criterion:

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
